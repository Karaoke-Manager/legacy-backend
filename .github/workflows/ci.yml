name: Continuous Integration
on: [ push, pull_request ]

env:
  target_py_version: "3.10"

jobs:
  lint:
    name: Lint Code Style
    runs-on: ubuntu-latest
    if: "always()"
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          # We can't use the built-in poetry cache because the actions used below are
          # not able to use the virtualenv used by poetry. Instead, we don't create a
          # venv but install dependencies globally.
          python-version: ${{ env.target_py_version }}
          cache: pip
          cache-dependency-path: poetry.lock
      - name: Install Poetry
        run: |
          pip install poetry
          poetry config virtualenvs.create false
      - name: Validate pyproject.toml
        run: poetry check --no-interaction
        # TODO: run poetry lock --check once that command is available
      - name: Install Dependencies
        run: poetry install --no-root
      - name: Run flake8
        if: "always()"
        uses: TrueBrain/actions-flake8@v2
        with:
          error_classes: B,I,C,E,F,W,B
      - name: Run MyPy
        if: "always()"
        uses: liskin/gh-problem-matcher-wrap@v1
        with:
          linters: mypy
          run: mypy --show-column-numbers
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: "always()"
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          # We can't use the built-in poetry cache because the actions used below are
          # not able to use the virtualenv used by poetry. Instead, we don't create a
          # venv but install dependencies globally.
          python-version: ${{ env.target_py_version }}
          cache: pip
          cache-dependency-path: poetry.lock
      - name: Install Poetry
        run: |
          pip install poetry
          poetry config virtualenvs.create false
      - name: Install Dependencies
        run: |
          poetry install --no-interaction --no-root --extras tests --extras sqlite
          pip install pytest-github-actions-annotate-failures
      - name: Run Pytest
        run: poe test --cov --cov-report=xml
      - name: Upload Coverage to Codecov
        if: "always()"
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage.xml
